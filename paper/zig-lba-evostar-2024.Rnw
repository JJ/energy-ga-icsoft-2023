\documentclass[runningheads]{llncs}

\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{hyperref}
\usepackage{color}
\renewcommand\UrlFont{\color{blue}\rmfamily}

\newcommand{\pinp}{\texttt{pinpoint}}
\newcommand{\lik}{\texttt{likwid}}

\begin{document}
\title{Best practices for energy-thrifty evolutionary algorithms in the low-level language {\sf zig}}

\author{
  Juan J. Merelo-Guervós\inst{1}\orcidID{0000-0002-1385-9741} \and Antonio M. Mora\inst{2}\orcidID{0000-0003-1603-9105} \and Mario García-Valdez\inst{3}\orcidID{0000-0002-2593-1114}
}
\institute{Department of Computer Engineering, Automatics and Robotics and CITIC University of Granada, Granada, Spain \and 
Department of Signal Theory, Telematics and Communications, University of Granada, Granada, Spain \and
Department of Graduate Studies, National Technological Institute of Mexico, Tijuana, Mexico\\
\email{jmerelo@ugr.es, amorag@ugr.es, mario@tectijuana.edu.mx}
}

\maketitle

\begin{abstract}
The most fruitful way of making evolutionary algorithms spend the least amount of energy is to consider all possible programming techniques that could, theoretically, affect performance, and carry out experiments using EA workloads in different platforms, eventually choosing those techniques that yield the minimum amount of energy expenses. These techniques include choice of different data structures, as well as affecting compilation in such a way that energy footprint is reduced; they have to be replicated in different computing platforms, because these expenditures may be affected by all the layers of the operating system and runtime framework used. In this paper we will experiment with different data structures and code refactoring techniques in the low-level language {\sf zig}, trying to come up with rules of thumb that will help developers create {\em green} evolutionary algorithms.
\keywords{Green computing, metaheuristics, energy-aware computing, evolutionary algorithms, zig}
\end{abstract}

One of the concerns in modern evolutionary computing is reducing the amount of energy spent in experiments, trying to make nature-inspired computing more nature-friendly \cite{fernandez2019}. This involves developing a methodology to measure energy spent, as well as identifying the EC operations that consume the most energy. In \cite{DBLP:conf/icsoft/GuervosGC23} we settled on a language and OS-independent set of tools, but also followed \cite{abdelhafez2019component} in choosing the set of operations under measure: mutation, crossover and a simple fitness evaluation, ONEMAX.

In \cite{DBLP:conf/icsoft/GuervosGC23} the main factor under study was the different interpreters used in a high-level language, JavaScript. In the case of low-level languages like {\sf zig}, a language that emphasizes safety and maintainability \cite{friesen2023designing}, there is a single compiler, but there are several choices to be made, even if the defaults should provide enough performance and energy efficiency. Yet, in general, developers, and even more so scientific developers, are unaware of the energy impact of their algorithm implementations \cite{7155416}, not to mention techniques available for their reduction \cite{longo2019reducing}.

In this paper we will work on a generic evolutionary algorithm workload, and see what the impact of different choices will have on its energy consumption. With this, we will try to find some best practices that will help practitioners implement evolutionary algorithms in {\sf zig} or other low-level languages.

The experiment setup will match the one used in \cite{DBLP:conf/icsoft/GuervosGC23}, using the same tools for energy profiling ({\sf pinpoint}) as well as Perl scripts to run the experiments and process the results.
All experiments for this paper have been carried out in a Linux machine {\tt 5.15.0-94-generic \#104~20.04.1-Ubuntu SMP} using AMD Ryzen 9 3950X 16-Core Processor. These are the versions used for every tool and language, with {\sf zig}  version 0.11.0, released by August 3, 2023, which is the last stable one at the time of writing this paper. The Perl scripts generate CSV files that are then processed and plotted using R embedded in the source code of this paper. All code, data and source for this paper are available at \url{https://github.com/JJ/energy-ga-icsoft2023} under a free license.

There are several units whose consumption can be measured using {\sf pinpoint} via the RAPL interface; since the use of GPU is negligible in these examples, only memory and CPUs will be measured. Together, they are called the {\em package} (alongside with caches and memory controllers); this is usually represented by the acronym {\sf PKG}.

We will be examining choices in three different areas\begin{itemize}
\item By default, {\sf zig} adds debug information to the resulting binary, without performing any kind of optimization. We will test the impact of using the {\sf ReleaseFast} option when building binaries.
\item The first version used strings for representing chromosomes. We will test arrays of Boolean values instead, which is a primitive type too.
\item Unlike other languages, {\sf zig} provides different memory allocators, which can be chosen by the developer. By default, a page allocator is used, but there is the possibility of using a fixed buffer size allocator.
\end{itemize}

We will first generate 40000 chromosomes of size 512, 1024 and 2048, and measure the energy consumption and running time of this operation; every combination is run 15 times. Not all combinations of the three techniques above could be tested, we show the results in Figure \ref{fig:lion.zig.setup}, along with the baseline that was compiled using default settings, character strings and page allocator. The other choices tested are: Built with {\sf ReleaseFast} option (tagged "ReleaseFast"), built in the same way and using a Fixed Buffer Allocator ("ReleaseFastFBA"), built with default options, using Boolean arrays as well as the Fixed Buffer Allocator ("Boolean")\footnote{This combination proved difficult in practice, crashing the program for size 2048; it did not work with the {\sf ReleaseFast} option either}.

<<lion.zig.setup, echo=F, message=F, fig.pos="h!tb", fig.height=3, fig.cap="Average running time and PKG energy consumption generating 40K chromosomes for the different techniques used (represented with different colors); dot shape represents the chromosome size.">>=
library(dplyr)
library(ggplot2)

generate.chromosomes.zig <- read.csv("../data/lion-zig-gen-23-Feb-12-03-41.csv")
generate.chromosomes.zig %>% group_by( size ) %>% summarise( mean.pkg = mean( PKG ), mean.seconds = mean( seconds ) ) -> generate.chromosomes.zig.avg
generate.chromosomes.zig$size <- as.factor(generate.chromosomes.zig$size)

generate.chromosomes.fast <- read.csv("../data/lion-zig-gen-release-fast-6-Mar-09-35-05.csv")
generate.chromosomes.fast %>% group_by( size ) %>% summarise( mean.pkg = mean( PKG ), mean.seconds = mean( seconds ) ) -> generate.chromosomes.fast.avg
generate.chromosomes.fast$size <- as.factor(generate.chromosomes.fast$size)

generate.chromosomes.bool <- read.csv("../data/lion-zig-gen-bool-7-Mar-08-44-39.csv")
generate.chromosomes.bool %>% group_by( size ) %>% summarise( mean.pkg = mean( PKG ), mean.seconds = mean( seconds ) ) -> generate.chromosomes.bool.avg
generate.chromosomes.bool$size <- as.factor(generate.chromosomes.bool$size)

generate.chromosomes.fast.fba <- read.csv("../data/lion-zig-gen-release-fast-fba-6-Mar-09-53-10.csv")
generate.chromosomes.fast.fba %>% group_by( size ) %>% summarise( mean.pkg = mean( PKG ), mean.seconds = mean( seconds ) ) -> generate.chromosomes.fast.fba.avg
generate.chromosomes.fast.fba$size <- as.factor(generate.chromosomes.fast.fba$size)

ggplot(generate.chromosomes.zig, aes(x=seconds, y=PKG, color="Baseline", shape=size)) +
  geom_point() +
  geom_point(data=generate.chromosomes.fast, aes(x=seconds, y=PKG, color="ReleaseFast", shape=size)) +
  geom_point(data=generate.chromosomes.bool, aes(x=seconds, y=PKG, color="Boolean", shape=size)) +
  geom_point(data=generate.chromosomes.fast.fba, aes(x=seconds, y=PKG, color="ReleaseFastFBA", shape=size)) +
  scale_color_manual(values=c("black", "red", "blue", "green")) +
  labs(title="Running time and PKG energy consumption generating 40K chromosomes",
       x="Running time", y="PKG (Joules)") +
  theme_minimal()
@

This Figure \ref{fig:lion.zig.setup} shows the dramatic change in energy consumption (as well as performance) that can be obtained just by changing compiling and programming options. Using a fixed buffer alongside the {\sf ReleaseFast} option implies a 95\% reduction in the energy consumed\footnote{We should take into account that generating chromosomes uses allocation heavily, so this is the kind of operation that would be the most impacted}. Even with the default compilation options, applying changes in the allocator and the data structure used reduces by 50\% energy used. The impact on running time, although not the focus of this paper, is also significant.

We will now run an experiment that, after generating the 40K chromosomes, will perform crossover + mutation + onemax operations on chromosomes of size 512, 1024 and 2048 \footnote{As indicated above, we could not make the Boolean bitstring along with fixed buffer allocation work for the biggest size}. In this case, the combination of fixed buffer allocator plus {\sf ReleaseFast} has been skipped, since beyond the initial generation of chromosomes, there is barely any allocation happening; in fact, just two temporary bitstrings during the crossover operation. Comparisons for the other two combinations plus baseline are shown in Figure \ref{fig:lion.zig.combined.ops}.

<<lion.zig.combined.ops, echo=F, message=F, fig.pos="h!tb", fig.height=3, fig.cap="Boxplot of PKG energy consumption processing 40K chromosomes via crossover, mutation and ONEMAX for different combinations of optimization techniques in Zig">>=
combined.ops.zig <- read.csv("../data/lion-zig-ops-24-Feb-20-08-58.csv")
generate.zig.avgs.seconds <- c(rep( generate.chromosomes.zig.avg$mean.seconds[1], 15),
                               rep( generate.chromosomes.zig.avg$mean.seconds[2], 15),
                               rep( generate.chromosomes.zig.avg$mean.seconds[3], 15))
combined.ops.zig$diff.seconds <- combined.ops.zig$seconds - generate.zig.avgs.seconds
generate.zig.avgs.pkg <- c(rep( generate.chromosomes.zig.avg$mean.pkg[1], 15),
                            rep( generate.chromosomes.zig.avg$mean.pkg[2], 15),
                            rep( generate.chromosomes.zig.avg$mean.pkg[3], 15))
combined.ops.zig$diff.PKG <- combined.ops.zig$PKG - generate.zig.avgs.pkg
combined.ops.zig$size <- as.factor(combined.ops.zig$size)
combined.ops.zig %>% group_by( size ) %>% summarise( mean.pkg = mean( diff.PKG ), sd.pkg = sd( diff.PKG), mean.seconds = mean( diff.seconds ) ) -> combined.ops.zig.avg

combined.ops.bool <- read.csv("../data/lion-zig-ops-bool-7-Mar-09-32-33.csv")
generate.bool.avgs.seconds <- c(rep( generate.chromosomes.bool.avg$mean.seconds[1], 15),
                               rep( generate.chromosomes.bool.avg$mean.seconds[2], 15))
combined.ops.bool$diff.seconds <- combined.ops.bool$seconds - generate.bool.avgs.seconds
generate.bool.avgs.pkg <- c(rep( generate.chromosomes.bool.avg$mean.pkg[1], 15),
                            rep( generate.chromosomes.bool.avg$mean.pkg[2], 15))
combined.ops.bool$diff.PKG <- combined.ops.bool$PKG - generate.bool.avgs.pkg
combined.ops.bool$size <- as.factor(combined.ops.bool$size)
combined.ops.bool %>% group_by( size ) %>% summarise( mean.pkg = mean( diff.PKG ), sd.pkg = sd( diff.PKG), mean.seconds = mean( diff.seconds ) ) -> combined.ops.bool.avg

combined.ops.fast <- read.csv("../data/lion-zig-ops-release-fast-6-Mar-09-36-11.csv")
generate.fast.avgs.seconds <- c(rep( generate.chromosomes.fast.avg$mean.seconds[1], 15),
                               rep( generate.chromosomes.fast.avg$mean.seconds[2], 15),
                               rep( generate.chromosomes.fast.avg$mean.seconds[3], 15))
combined.ops.fast$diff.seconds <- combined.ops.fast$seconds - generate.fast.avgs.seconds
generate.fast.avgs.pkg <- c(rep( generate.chromosomes.fast.avg$mean.pkg[1], 15),
                            rep( generate.chromosomes.fast.avg$mean.pkg[2], 15),
                            rep( generate.chromosomes.fast.avg$mean.pkg[3], 15))
combined.ops.fast$diff.PKG <- combined.ops.fast$PKG - generate.fast.avgs.pkg
combined.ops.fast$size <- as.factor(combined.ops.fast$size)
combined.ops.fast %>% group_by( size ) %>% summarise( mean.pkg = mean( diff.PKG ), sd.pkg = sd( diff.PKG), mean.seconds = mean( diff.seconds ) ) -> combined.ops.fast.avg

combined.ops <- rbind(combined.ops.zig, combined.ops.bool, combined.ops.fast)
ggplot(combined.ops, aes(x=size, y=diff.PKG, color=Platform))+geom_boxplot(notch=T)+
  labs(title="Running time and PKG energy consumption, combined operations.",
       x="Chromosome size", y="PKG (Joules)") +
  theme_minimal()
@

This case is remarkably different to the one shown in Figure \ref{fig:lion.zig.setup}. For starters, the energy consumption is very low, one order of magnitude lower; regular genetic operations do not spend a lot of energy indeed, with most consumption focused on fitness functions. Even so, the fast compilation spends half the energy of the other combinations. Remarkably, using a different data structure does not always imply a better energy profile; it does so only for the smaller size, 512 bits (which is anyway closer to usual chromosome sizes).

In this paper we have used different techniques that potentially could reduce the amount of energy spent by a genetic algorithm implemented using the low-level language {\sf zig}: testing different data structures, allocation policies and compilation options. The most dramatic reduction is achieved with the {\em fast} compilation policy, but additional improvements can be obtained by using adequate data structures and allocation policies. By using best practices in this area, {\sf zig} implementations can indeed be considered the {\em greener} ones among other high-level or Java Virtual Machine based languages. it remains as future work, however, how applying similar techniques when available will impact the energy consumption of other languages.


\section*{Acknowledgements and data availability}

This work is supported by the Ministerio espa\~{n}ol de Econom\'{\i}a y
Competitividad (Spanish Ministry of Competitivity and Economy) under project
PID2020-115570GB-C22 (DemocratAI::UGR). We are also very grateful to the {\sf zig} community. Source and data available from \url{https://github.com/JJ/energy-ga-icsoft-2023} under a GPL license.

\bibliographystyle{splncs04}

\bibliography{energy,javascript,geneura}


\end{document}

