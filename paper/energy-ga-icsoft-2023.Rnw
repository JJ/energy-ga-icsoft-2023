\documentclass[a4paper,twoside]{article}

\usepackage{epsfig}
\usepackage{subcaption}
\usepackage{calc}
\usepackage{amssymb}
\usepackage{amstext}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{multicol}
\usepackage{pslatex}
\usepackage{apalike}
\usepackage[bottom]{footmisc}
\usepackage{SCITEPRESS}     % Please add other packages that you may need BEFORE the SCITEPRESS.sty package.
\usepackage{hyperref}

\begin{document}

\title{An analysis of energy consumption of JavaScript interpreters/compilers in evolutionary algorithm workloads}

\author{\authorname{Juan J. Merelo-Guervós\sup{1}\orcidAuthor{0000-0002-1385-9741} and Mario García-Valdez\sup{2}\orcidAuthor{0000-0002-2593-1114}}
\affiliation{\sup{1}Department of Computer Engineering, Automatics and Robotics, University of Granada, Granada, Spain}
\affiliation{\sup{2}Department of Graduate Studies, National Technological Institute of Mexico, Tijuana, Mexico}
\email{jmerelo@ugr.es, mario@tectijuana.edu.mx}
}

\keywords{Green computing, metaheuristics, JavaScript}

\abstract{
% The abstract should summarize the contents of the paper and should contain at least 70 and at most 200 words. The text must be set to 9-point font size.
}

\onecolumn \maketitle \normalsize \setcounter{footnote}{0} \vfill

\section{\uppercase{Introduction}}
\label{sec:introduction}

% About popularity the TIOBE index is more complete, there JS ranks in 7h. - M
% We could explain a bit about the ogrady ranking, that is based on github repos. - M

From a language designed in the nineties for simple browser widgets and client-side validations \cite{goodman2007javascript,flanagan1998javascript}, JavaScript is nowadays the most popular language among developers \cite{ogrady22:ranking}, occupying this position since 2014 \cite{ogrady14:ranking}, mainly because it is almost exclusively the language needed for front-end programming (competing only with app development languages, such as Swift or Kotlin, or languages transpiled to JavaScript, such as Dart), while at the same time being very strong for full-stack development, with solid support for the back end, including application servers, middleware, and database programming. Due to its popularity and the fact that it has a continuously evolving standard \cite{ecma1999262}, traditionally, there have been different virtual machines (or interpreters) to run its programs. During the first years, browsers were the only running platform available; however, the introduction of Node.js running on the V8 JavaScript Engine \cite{5617064} gave it the popularity it has today; this popularity, in turn, provoked new interpreters to spawn like {\sf deno} \cite{runtimeintroducing} (written in Rust) and {\sf bun} \cite{bun} programmed in the relatively unknown language Zig.

No wonder, then, than JavaScript is also popular as a language for implementing metaheuristics, especially evolutionary algorithms, since early implementations in the browser \cite{smith1996ga,jesusIWANN99,langdon2004global}, whole libraries \cite{EvoStar2014:jsEO}, through complete implementations geared towards volunteer computing \cite{2016arXiv160101607M}. But one of the criticisms leveraged towards these implementations of evolutionary algorithms is the (possible) lack of speed of the language compared to other compiled languages (mainly Java, very popular with metaheuristics implementations, or C++).

This is why, since implementation matters \cite{DBLP:conf/iwann/MereloRACML11}, choosing the right interpreter is going to have a big impact on the performance of any workload; if you decide to choose JavaScript for any reason (such as seamless client/server integration, or be able to run your algorithm either on the browser or from the command line if desired) knowing which VM delivers the best performance is essential, either from the scientific point of view, or for the software engineering point of view.

At the same time, with the advent of the concept of green computing \cite{kurp2008green}, it becomes increasingly important to measure not only the raw wall clock performance (which was the focus of papers such as \cite{DBLP:conf/evoW/GuervosBCRGRVHR17}), but also to achieve a certain level of performance with a certain amount of energy consumption, or else to minimize the consumption needed to run a certain workload. This will be the main focus of this paper; since the core of the different JS virtual machines is different, and are created with languages with different focus (Rust is focused on memory safety \cite{noseda2022rust}, Zig based on simplicity and performance \cite{zig}), different consumption should be expected. Since all three languages are able to (roughly) run the same, unmodified source code, what we intend with this paper is to advice on which JS interpreter might give the lowest power consumption, the maximum performance, or both, so that evolutionary algorithm practitioners can target it for their development.

The rest of the paper follows this plan: next we will present the state of the art; then we will describe the experimental setup in Section \ref{sec:setup}; results will be presented next in Section \ref{sec:res}, and we will end with a discussion of results, conclusions and future lines of work.

\section{State of the art}

Since metaheuristics are so extensively used in machine learning applications,
its interest in research has grown in parallel to its number of applications.
Many papers focus on measuring different aspects of the algorithm and how it
impacts energy consumption \cite{diaz2022population}.

\section*{Acknowledgements}

This work is supported by the Ministerio espa\~{n}ol de Econom\'{\i}a y Competitividad (Spanish Ministry of Competitivity and Economy) under project PID2020-115570GB-C22 (DemocratAI::UGR).


\bibliographystyle{apalike}
{\small
\bibliography{energy,javascript,geneura}}


\end{document}

